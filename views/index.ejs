<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Mapbox</title>
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.50.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.50.0/mapbox-gl.css' rel='stylesheet'/>
    <script src="https://cdn.jsdelivr.net/npm/@turf/turf@5/turf.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script type="text/javascript" src="/config/config.js"></script>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<div id="map"></div>
<nav id='listing-group' class='listing-group'></nav>
</body>
</html>

<script>
    mapboxgl.accessToken = config.mapboxgl_accesstoken;
    const map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
        center: [-82, 30], // starting position [lng, lat]
        zoom: 8 // starting zoom
    });


    map.on('load', function () {
        $.ajax({
            type: 'GET',
            url: '/datasample',
            success: function (geoJson) {
                var cellSide = 3;
                var hexGrid = turf.hexGrid(turf.bbox(geoJson), cellSide, {});

                for (let i = 0; i < hexGrid.features.length; i++) {
                    let ptsWithin = turf.pointsWithinPolygon(geoJson, hexGrid.features[i])
                    if (ptsWithin.features.length > 0) {
                        for (let j = 0; j < ptsWithin.features.length; j++) {
                            hexGrid.features[i].properties = {count: ptsWithin.features.length, id: i};
                        }
                    } else {
                        hexGrid.features[i].properties = {count: 0, id: i};
                    }
                }
                map.addSource('geojson', {type: 'geojson', data: geoJson})

                map.addSource('data', {type: 'geojson', data: hexGrid})
                map.addLayer({
                    'id': 'hexagon',
                    'type': 'fill',
                    'source': 'data',
                    'layout': {
                        'visibility': 'visible'
                    },
                    'paint': {
                        'fill-color': [
                            "interpolate", ["linear"], ["get", "count"],
                            0,
                            ["to-color", "#e8d7d3"],
                            150,
                            ["to-color", "#721802"],
                        ],
                        'fill-outline-color': '#161616',
                        'fill-opacity': 0.5
                    },
                    'filter': ['!in', 'id', ""]
                });
                map.addLayer({
                    'id': 'allFeature',
                    'type': 'fill',
                    'source': 'data',
                    'layout': {
                        'visibility': 'visible'
                    }, 'paint': {
                        'fill-opacity': 0
                    }
                });
                map.addLayer({
                    'id': 'points',
                    'type': 'circle',
                    'source': 'geojson',
                    'layout': {
                        'visibility': 'visible'
                    },
                    'paint': {
                        'circle-color':
                            "#f4e242"
                    },
                    'filter': ['in', 'policyID', ""]
                });
                var listingGroup = document.getElementById('listing-group');
                var properties = geoJson.features[0].properties;
                var propertyKeys = Object.keys(properties)
                propertyKeys.forEach(function (propertyKey) {
                    let label = document.createElement('label');
                    let input = document.createElement('input');
                    label.innerText = propertyKey;
                    label.setAttribute('for', propertyKey);
                    input.setAttribute('type', 'checkbox');
                    input.setAttribute('checked', 'checked');
                    input.setAttribute('id', propertyKey);
                    listingGroup.appendChild(input);
                    listingGroup.appendChild(label);
                })

                map.on('click', function (e) {
                    let width1 = 10;
                    let height1 = 10;
                    let selectedHexagon = map.queryRenderedFeatures([
                            [e.point.x - width1 / 2, e.point.y - height1 / 2],
                            [e.point.x + width1 / 2, e.point.y + height1 / 2]],
                        {layers: ['hexagon']});

                    let hexFilter = selectedHexagon.reduce(function (ids, feature) {
                        ids.push(feature.properties.id);
                        return ids;
                    }, ['!in', 'id']);
                    var selectedPoints = [];
                    var pointFilter;
                    if (selectedHexagon.length > 0) {
                        for (let i = 0; i < selectedHexagon.length; i++) {
                            var pointsInHex = turf.pointsWithinPolygon(geoJson, selectedHexagon[i]);
                            for (let j = 0; j < pointsInHex.features.length; j++) {
                                selectedPoints.push(pointsInHex.features[j]);
                            }
                        }
                        pointFilter = selectedPoints.reduce(function (ids, feature) {
                            ids.push(feature.properties.policyID);
                            return ids;
                        }, ['in', 'policyID']);
                    } else {
                        pointFilter = ['in', 'policyID', '']
                    }
                    map.setFilter('hexagon', hexFilter);
                    map.setFilter('points', pointFilter);
                })

                var popup = new mapboxgl.Popup({
                    closeButton: false,
                    closeOnClick: false
                });

                map.on('mouseenter', 'points', function (e) {
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var clickedPointProperties = e.features[0].properties
                    var description = "<ul>";
                    propertyKeys.forEach(function (propertyKey) {
                        if (document.getElementById(propertyKey).checked === true) {
                            description += "<li>" + propertyKey + ": " + clickedPointProperties[propertyKey] + "</li>"
                        }
                    })
                    description += "</ul>"
                    popup.setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(map);
                });
                map.on('mouseleave', 'points', function () {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                });
            }
        })
    })
</script>
